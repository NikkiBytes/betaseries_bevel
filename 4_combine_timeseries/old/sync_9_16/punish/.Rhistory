all.files <- list.files(path = "~/Documents/bevel_choice/by_participant_txtfiles/",pattern = ".txt", full.names = TRUE)
mylist <- lapply(all.files, readdata)
mydata <- rbindlist( mylist )
readdata <- function(fn){
dt_temp <- fread(fn, sep="\t")
return(dt_temp)
}
readdata <- function(fn){
dt_temp <- fread(fn, sep="\t")
return(dt_temp)
}
all.files <- list.files(path = "~/Documents/bevel_choice/by_participant_txtfiles/",pattern = ".txt", full.names = TRUE)
mylist <- lapply(all.files, readdata)
mydata <- rbindlist(mylist, fill=TRUE)
names(mydata)<-c("sub_num","run","type","choice","side","outcome","congruent","RT")
readdata <- function(fn){
dt_temp <- fread(fn, sep="\t")
return(dt_temp)
}
all.files <- list.files(path = "~/Documents/bevel_choice/by_participant_txtfiles/",pattern = ".txt", full.names = TRUE)
mylist <- lapply(all.files, readdata)
mydata <- rbindlist(mylist, use.names=FALSE)
names(mydata)<-c("sub_num","run","type","choice","side","outcome","congruent","RT")
mydata$side<-as.factor(mydata$side)
mydata$side<-revalue(mydata$side, c("1"="left", "2"="right"))
library(plyr)
readdata <- function(fn){
dt_temp <- fread(fn, sep="\t")
return(dt_temp)
}
all.files <- list.files(path = "~/Documents/bevel_choice/by_participant_txtfiles/",pattern = ".txt", full.names = TRUE)
mylist <- lapply(all.files, readdata)
mydata <- rbindlist(mylist, use.names=FALSE)
names(mydata)<-c("sub_num","run","type","choice","side","outcome","congruent","RT")
mydata$side<-as.factor(mydata$side)
mydata$side<-revalue(mydata$side, c("1"="left", "2"="right"))
mydata <- mydata %>%
group_by(.dots=c("sub_num")) %>%
mutate(Count=row_number())
mydata <- mydata %>%
group_by(.dots=c("sub_num")) %>%
mutate(Count=row_number())
library(tidyverse)
mydata <- mydata %>%
group_by(.dots=c("sub_num")) %>%
mutate(Count=row_number())
mydata <- mydata %>%
group_by(.dots=c("sub_num")) %>%
dplyr::mutate(Count=row_number())
head(mydata)
mydata$sub_num
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) ,fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+
scale_x_continuous(name="Trial Number") +
scale_y_continuous(name="Participant ID") +
labs(colour = "Outcome")
hmTOTAL
hmTOTAL
library(ggplot2)
library(ggplot2)
library(ggpubr)
library(plyr)
library(tidyverse)
library(reshape)
library(data.table)
readdata <- function(fn){
dt_temp <- fread(fn, sep="\t")
return(dt_temp)
}
all.files <- list.files(path = "~/Documents/bevel_choice/by_participant_txtfiles/",pattern = ".txt", full.names = TRUE)
mylist <- lapply(all.files, readdata)
mydata <- rbindlist(mylist, use.names=FALSE)
names(mydata)<-c("sub_num","run","type","choice","side","outcome","congruent","RT")
mydata$side<-as.factor(mydata$side)
mydata$side<-revalue(mydata$side, c("1"="left", "2"="right"))
mydata <- mydata %>%
group_by(.dots=c("sub_num")) %>%
dplyr::mutate(Count=row_number())
mydata$outcome0[mydata$outcome == "Miss"] <- 0
mydata$outcome0[mydata$outcome == "punish"] <- -10
mydata$outcome0[mydata$outcome == "reward"] <- 10
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) ,fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+
scale_x_continuous(name="Trial Number") +
scale_y_continuous(name="Participant ID") +
labs(colour = "Outcome")
#geom_point(aes(shape=as.factor(choice), size=1, color=as.factor(choice)))
hmTOTAL
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) ,fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+
xlab(label = "Trial")
hmTOTAL
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) ,fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+ xlab(label = "Trial") + ylab(label= 'Subject Number')
hmTOTAL
hmTOTALbad_flip<-ggplot(subset(data0, learn == "didn't learn"),aes(as.numeric(Count), as.factor(sub_num) ,fill=choice0))+
geom_tile()+
scale_fill_gradient2(low="pink", high="blue", na.value="black", name="") +
theme_classic()+ xlab(label = "Trial") + ylab(label= 'Subject Number') +
guide_colorbar(title = "Choice")
data0$choice0[data0$choice == "Miss"] <- 0
library(ggplot2)
library(ggpubr)
library(plyr)
library(tidyverse)
library(reshape)
library(data.table)
readdata <- function(fn){
dt_temp <- fread(fn, sep="\t")
return(dt_temp)
}
all.files <- list.files(path = "~/Documents/bevel_choice/by_participant_txtfiles/",pattern = ".txt", full.names = TRUE)
mylist <- lapply(all.files, readdata)
mydata <- rbindlist(mylist, use.names=FALSE)
names(mydata)<-c("sub_num","run","type","choice","side","outcome","congruent","RT")
mydata$side<-as.factor(mydata$side)
mydata$side<-revalue(mydata$side, c("1"="left", "2"="right"))
mydata <- mydata %>%
group_by(.dots=c("sub_num")) %>%
dplyr::mutate(Count=row_number())
mydata$outcome0[mydata$outcome == "Miss"] <- 0
mydata$outcome0[mydata$outcome == "punish"] <- -10
mydata$outcome0[mydata$outcome == "reward"] <- 10
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) , fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+ xlab(label = "Trial") + ylab(label= 'Subject Number')
#geom_point(aes(shape=as.factor(choice), size=1, color=as.factor(choice)))
hmTOTAL
mydata$outcome0[mydata$outcome == "Miss"] <- 0
mydata$outcome0[mydata$outcome == "punish"] <- -10
mydata$outcome0[mydata$outcome == "reward"] <- 10
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) , fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+ xlab(label = "Trial") + ylab(label= 'Subject Number')+
guide_colorbar(title = "Outcome")
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) , fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+ xlab(label = "Trial") + ylab(label= 'Subject Number')+
guides(fill=guide_legend(title='Outcome'))
hmTOTAL
mydata$outcome0[mydata$outcome == "Miss"] <- 0
mydata$outcome0[mydata$outcome == "punish"] <- -10
mydata$outcome0[mydata$outcome == "reward"] <- 10
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) , fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+ xlab(label = "Trial") + ylab(label= 'Subject Number')+
guides(fill=guide_legend(title='Outcome'), labels=c("Punish", "Miss", "Reward")
#geom_point(aes(shape=as.factor(choice), size=1, color=as.factor(choice)))
hmTOTAL
mydata$outcome0[mydata$outcome == "Miss"] <- 0
mydata$outcome0[mydata$outcome == "punish"] <- -10
mydata$outcome0[mydata$outcome == "reward"] <- 10
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) , fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+ xlab(label = "Trial") + ylab(label= 'Subject Number')+
guides(fill=guide_legend(title='Outcome'), labels=c("Punish", "Miss", "Reward"))
#geom_point(aes(shape=as.factor(choice), size=1, color=as.factor(choice)))
hmTOTAL
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) , fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+ xlab(label = "Trial") + ylab(label= 'Subject Number')+
guides(fill=guide_legend(title='Outcome'),
breaks=c("-10", "0", "10"), labels=c("Punish", "Miss", "Reward"))
hmTOTAL
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) , fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+ xlab(label = "Trial") + ylab(label= 'Subject Number')+
guides(fill=guide_legend(title='Outcome')) +
geom_point(aes(shape=as.factor(choice), size=1, color=as.factor(choice)))
hmTOTAL
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) , fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+ xlab(label = "Trial") + ylab(label= 'Subject Number')+
guides(fill=guide_legend(title='Outcome')) +
geom_point(aes(shape=as.factor(choice), size=1, color=as.factor(choice)))
hmTOTAL
hmTOTAL<-ggplot(mydata,aes(as.numeric(Count), as.factor(sub_num) , fill=outcome0))+
geom_tile()+
scale_fill_gradient2(low="red", high="green", na.value="black", name="")+
theme_classic()+ xlab(label = "Trial") + ylab(label= 'Subject Number')+
guides(fill=guide_legend(title='Outcome')) +
geom_point(aes(shape=as.factor(choice), size=.7, color=as.factor(choice)))
hmTOTAL
hmTOTAL
test<-ggarrange(hmTOTALgood,hmTOTALbad,
labels = c("Learned", "Did Not Learn"), label.y = 5
ncol = 1, nrow = 2)
summary(data0$sensitivity_reward)
data0$learn[data0$sensitivity_reward < 0.444]<- "didn't learn"
all_plot<-ggarrange(plot1, plot2, plot3,
labels = c("80/20 pair", "70/30 pair", "60/40 pair"),
ncol = 3, nrow = 1)
all_plot<-ggarrange(plot1, plot2, plot3,
labels = c("80/20 pair", "70/30 pair", "60/40 pair"),
ncol = 3, nrow = 1)
all_plot
all_plot<-ggarrange(plot1, plot2, plot3,
labels = c("80/20 pair", "70/30 pair", "60/40 pair"),
ncol = 3, nrow = 1)
all_plot
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.delim("all_subjects.txt")
names(data) <- c("subj", "run", "pair", "choice", "outcome", "congruent", "RT")
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.delim("all_subjects.txt")
names(data) <- c("subj", "run", "pair", "choice", "outcome", "congruent", "RT")
View(data)
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.delim("~/Documents/bevel_choice/all_subjects.txt")
names(data) <- c("subj", "run", "pair", "choice", "outcome", "congruent", "RT")
View(data)
data <- data %>%
group_by(.dots=c("subj")) %>%
mutate(Count=row_number())
percent_matched <- function(n) {
count <- sum(data$Count == n & data$congruent=="congruent")
countall <- sum(data$Count == n)
return(count/countall)
}
percent_matched <- function(n) {
count <- sum(data$subj == n & data$congruent=="congruent")
countall <- sum(data$subj == n)
return(count/countall)
}
percent_matched(5)
percent_matched(6)
percent_matched <- function(n) {
count <- sum(data$subj == n & data$congruent=="congruent")
countall <- sum(data$congruent=="congruent" | data$congruent=="incongruent")
return(count/countall)
}
percent_matched(6)
percent_matched <- function(n) {
count <- sum(data$subj == n & data$congruent=="congruent")
countall <- sum(data$subj = n & !data$congruent=="Miss")
return(count/countall)
}
percent_matched(6)
percent_matched <- function(n) {
count <- sum(data$subj == n & data$congruent=="congruent")
countall <- sum(data$subj == n & !data$congruent=="Miss")
return(count/countall)
}
percent_matched(6)
percent_matched(1)
x <- 1:90
output <- lapply(x, percent_matched)
df <- data.frame(matrix(unlist(output), nrow=length(output), byrow=T))
colnames(df)[colnames(df)=="matrix.unlist.output...nrow...length.output...byrow...T."] <- "percent_mismatched"
View(df)
df$subj <- row.names()
df$subj <- row.names(df)
View(df)
summary(df$percent_mismatched)
write.table(df, file = "~/Documents/bevel_choice/all_subjects/proportion_congruent.txt", sep = "\t",
row.names = F, col.names = TRUE)
write.csv(df, file = "~/Documents/bevel_choice/my_data.csv")
summary(df$percent_matched)
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.delim("~/Documents/bevel_choice/all_subjects.txt")
names(data) <- c("subj", "run", "pair", "choice", "outcome", "congruent", "RT")
data <- data %>%
group_by(.dots=c("subj")) %>%
mutate(Count=row_number())
percent_matched <- function(n) {
count <- sum(data$subj == n & data$congruent=="congruent")
countall <- sum(data$subj == n & !data$congruent=="Miss")
return(count/countall)
}
percent_matched(1)
x <- 1:90
output <- lapply(x, percent_matched)
df <- data.frame(matrix(unlist(output), nrow=length(output), byrow=T))
colnames(df)[colnames(df)=="matrix.unlist.output...nrow...length.output...byrow...T."] <- "percent_matched"
summary(df$percent_matched)
write.csv(df, file = "~/Documents/bevel_choice/percent_matched.csv")
#install.packages("nFactors")
library(nFactors)
#loading in data csv with all variables of interest
#data.all <- read.table("~/Documents/milkfadata031519.csv", sep=",", header = T)
data.all <- read.table("~/Google Drive/NIBL/Projects/factor_analysis/Data/milkfadata031519.csv", sep=",", header = T)
#double-checking all variables show up (and all data associated)
names(data.all)
head(data.all)
#separating out dependent variables for factor analysis:
#assign those to dep.vars, then create data.dep to have the dep.vars only from data.all
dep.vars <- c("rmr","teei","basdrive","basfun","basreward","bis","eetotal","restotal","tfeqf1",
"tfeqf2","tfeqf3","bffq_totalcal","bffq_.fat","bffq_.sug","cravehifat","craveswt","cravestrch",
"cravefast","likehifat","likeswt","likestrch","likefast","rscd","rswf","hungrydiff","fulldiff",
"foodreinforcement","pleasantdiff","ediblediff","wantdiff","familiardiff","intensitydiff")
data.dep <- data.all[dep.vars]
summary(data.dep)
#removing NA values so that following analysis will work
data.dep=data.dep[complete.cases(data.dep),]
#determining # of factors to extract by getting eigenvalues & making a Scree plot
ev <- eigen(cor(data.dep))
ap <- parallel(subject=nrow(data.dep), var=ncol(data.dep),
rep=100, cent=.05)
nS <- nScree(x=ev$values, aparallel = ap$eigen$qevpa)
plotnScree(nS)
#loading in data csv with all variables of interest
#data.all <- read.table("~/Documents/milkfadata031519.csv", sep=",", header = T)
data.all <- read.table("~/Google Drive/NIBL/Projects/factor_analysis/Data/milkfadata031519.csv", sep=",", header = T)
#double-checking all variables show up (and all data associated)
names(data.all)
head(data.all)
View(data.all)
print(data.fa,digits=2,cutoff=.3,sort=TRUE)
#factor analysis using Parallel Analysis (n=11) from the Scree plot
data.fa <- factanal(data.dep, factors=11, rotation="varimax")
#separating out dependent variables for factor analysis:
#assign those to dep.vars, then create data.dep to have the dep.vars only from data.all
dep.vars <- c("rmr","teei","basdrive","basfun","basreward","bis","eetotal","restotal","tfeqf1",
"tfeqf2","tfeqf3","bffq_totalcal","bffq_.fat","bffq_.sug","cravehifat","craveswt","cravestrch",
"cravefast","likehifat","likeswt","likestrch","likefast","rscd","rswf","hungrydiff","fulldiff",
"foodreinforcement","pleasantdiff","ediblediff","wantdiff","familiardiff","intensitydiff")
data.dep <- data.all[dep.vars]
summary(data.dep)
#removing NA values so that following analysis will work
data.dep=data.dep[complete.cases(data.dep),]
#determining # of factors to extract by getting eigenvalues & making a Scree plot
ev <- eigen(cor(data.dep))
ap <- parallel(subject=nrow(data.dep), var=ncol(data.dep),
rep=100, cent=.05)
nS <- nScree(x=ev$values, aparallel = ap$eigen$qevpa)
plotnScree(nS)
#factor analysis using Parallel Analysis (n=11) from the Scree plot
data.fa <- factanal(data.dep, factors=11, rotation="varimax")
print(data.fa,digits=2,cutoff=.3,sort=TRUE)
#factor analysis using Parallel Analysis (n=11) from the Scree plot
data.fa <- factanal(data.dep, factors=10, rotation="varimax")
print(data.fa,digits=2,cutoff=.3,sort=TRUE)
#factor analysis using Parallel Analysis (n=11) from the Scree plot
data.fa <- factanal(data.dep, factors=11, rotation="varimax")
print(data.fa,digits=2,cutoff=.3,sort=TRUE)
library(psych)
library(readxl)
library(ggplot2)
library(psych)
#Load in the data
df <- read.csv("/Users/jennygilbert/Google Drive/NIBL/5_my_dissertation/dissertation/4_aim3/analysis_w_identifiers/bbx_sample_reduced.csv", header=TRUE, sep=",")
names(df)
#Describe BMI categories
table(df$BMIc,df$w1scan_sex)
table(df$BMIc, df$w1behav_race)
describeBy(df$w1behav_age, df$BMIc)
ggplot(data=df, aes(df$BMI)) +
geom_histogram()
ggplot(data=df, aes(df$BMI) +
geom_histogram(), binwidth = 5,  main = "Histogram of BMI", xlab = "Age",
fill=I("blue"), alpha=I(.2))
ggplot(data=df, aes(df$BMI)) +
geom_histogram(binwidth = 5,  main = "Histogram of BMI", xlab = "Age",
fill=I("blue"), alpha=I(.2))
ggplot(data=df, aes(df$BMI)) +
geom_histogram(binwidth = 5,  main = "Histogram of BMI", xlab = "Age",
fill=I("blue"), alpha=I(.5))
ggplot(data=df, aes(df$BMI)) +
geom_histogram(binwidth = .5,  main = "Histogram of BMI", xlab = "Age",
fill=I("blue"), alpha=I(.5))
ggplot(data=df, aes(df$BMI)) +
geom_histogram(binwidth = 1,  main = "Histogram of BMI", xlab = "Age",
fill=I("blue"), alpha=I(.5))
ggplot(data=df, aes(df$BMI)) +
geom_histogram(binwidth = 1,  main = "Histogram of BMI", xlab = "Age",
fill=I("blue"), alpha=I(.5), col=I("black"))
library(readxl)
library(ggplot2)
library(psych)
#Load in the data
df <- read.csv("/Users/jennygilbert/Google Drive/NIBL/5_my_dissertation/dissertation/4_aim3/analysis_w_identifiers/bbx_sample_reduced.csv", header=TRUE, sep=",")
#Load in the data
df <- read.csv("/Users/jennygilbert/Google Drive/NIBL/2_my_papers/2019_bbx/analysis_w_identifiers/bbx_sample_reduced.csv", header=TRUE, sep=",")
names(df)
#Make a categorical variable
attach(df)
df$BMIc[BMI < 25.0] <- "healthy-weight"
df$BMIc[BMI >= 25.0] <- "overweight/obese"
detach(df)
print(df$BMIc)
#Describe BMI categories
table(df$BMIc,df$w1scan_sex)
table(df$BMIc, df$w1behav_race)
describeBy(df$w1behav_age, df$BMIc)
ggplot(data=df, aes(df$BMI)) +
geom_histogram(binwidth = 1,  main = "Histogram of BMI", xlab = "Age",
fill=I("blue"), alpha=I(.5), col=I("black"))
library(Hmisc)
library(corrplot)
setwd('/Users/jennygilbert/Documents/betaseries_bevel/4_combine_timeseries/sync_9_16/reward/')
corr_func <- function(name){
data <- read.delim(name, header = FALSE, sep = "\t")
names(data) <- c("Amygdala_L", "Amygdala_R", "Dorsal_striatum_L", "Dorsal_striatum_R", "Fusiform_gyrus_L", "Fusiform_gyrus_R", "Hippocampus_L", "Hippocampus_R", "Insula_L",
"Insula_R", "Intracalcarine_cortex_L", "Intracalcarine_cortex_R", "lOFC_R", "mOFC_L", "mOFC_R", "Oral_somatosensory_cortex_L", "Oral_somatosensory_cortex_R", "Precuneus_L",
"Precuneus_R", "Ventral_striatum_L", "Ventral_striatum_R", "vlPFC_L", "vlPFC_R", "vlThalamus_L" , "vlThalamus_R", "vmPFC_L", "vmPFC_R")
data.rcorr = rcorr(as.matrix(data))
data.coeff = data.rcorr$r
filename = paste(name, "_corr.csv")
write.table(data.coeff, file = filename, append = FALSE, sep = ",", dec = ".",
row.names = TRUE, col.names = TRUE)
data.p = data.rcorr$P
filename = paste(name, "_p.csv")
write.table(data.p, file = filenamep, append = FALSE, sep = ",", dec = ".",
row.names = TRUE, col.names = TRUE)
}
corr_func('bevel30_reward.txt')
corr_func('sub-031_reward.txt')
corr_func <- function(name){
data <- read.delim(name, header = FALSE, sep = "\t")
names(data) <- c("Amygdala_L", "Amygdala_R", "Dorsal_striatum_L", "Dorsal_striatum_R", "Fusiform_gyrus_L", "Fusiform_gyrus_R", "Hippocampus_L", "Hippocampus_R", "Insula_L",
"Insula_R", "Intracalcarine_cortex_L", "Intracalcarine_cortex_R", "lOFC_R", "mOFC_L", "mOFC_R", "Oral_somatosensory_cortex_L", "Oral_somatosensory_cortex_R", "Precuneus_L",
"Precuneus_R", "Ventral_striatum_L", "Ventral_striatum_R", "vlPFC_L", "vlPFC_R", "vlThalamus_L" , "vlThalamus_R", "vmPFC_L", "vmPFC_R")
data.rcorr = rcorr(as.matrix(data))
data.coeff = data.rcorr$r
filename = paste(name, "_corr.csv")
write.table(data.coeff, file = filename, append = FALSE, sep = ",", dec = ".",
row.names = TRUE, col.names = TRUE)
data.p = data.rcorr$P
filenamep = paste(name, "_p.csv")
write.table(data.p, file = filenamep, append = FALSE, sep = ",", dec = ".",
row.names = TRUE, col.names = TRUE)
}
corr_func('sub-031_reward.txt')
corr_func <- function(name){
data <- read.delim(name, header = FALSE, sep = "\t")
names(data) <- c("Amygdala_L", "Amygdala_R", "Dorsal_striatum_L", "Dorsal_striatum_R", "Fusiform_gyrus_L", "Fusiform_gyrus_R", "Hippocampus_L", "Hippocampus_R", "Insula_L",
"Insula_R", "Intracalcarine_cortex_L", "Intracalcarine_cortex_R", "lOFC_R", "mOFC_L", "mOFC_R", "Oral_somatosensory_cortex_L", "Oral_somatosensory_cortex_R", "Precuneus_L",
"Precuneus_R", "Ventral_striatum_L", "Ventral_striatum_R", "vlPFC_L", "vlPFC_R", "vlThalamus_L" , "vlThalamus_R", "vmPFC_L", "vmPFC_R")
data.rcorr = rcorr(as.matrix(data))
data.coeff = data.rcorr$r
filename = paste(name, "_corr.csv")
write.table(data.coeff, file = filename, append = FALSE, sep = ",", dec = ".",
row.names = TRUE, col.names = TRUE)
data.p = data.rcorr$P
filenamep = paste(name, "_p.csv")
write.table(data.p, file = filenamep, append = FALSE, sep = ",", dec = ".",
row.names = TRUE, col.names = TRUE)
pdfname = paste(name, "_corrplot.pdf")
pdf(pdfname)
corrplot(data.rcorr$r, method = "color", p.mat = data.rcorr$P, sig.level = 0.001, insig = "label_sig")
dev.off()
}
corr_func('sub-031_reward.txt')
#make a list of files
filelist <- list.files(mypath, all.files = TRUE)
print(filelist)
#make a list of files
mypath <- '/Users/jennygilbert/Documents/betaseries_bevel/4_combine_timeseries/sync_9_16/reward/'
filelist <- list.files(path = mypath, pattern = "*.txt")
print(filelist)
filelist <- list.files(path = mypath, pattern = "*_reward.txt")
print(filelist)
splitPath("/Users/jennygilbert/Documents/betaseries_bevel/4_combine_timeseries/sync_9_16/reward/", last.is.file = NULL)
#make a list of files
mypath <- '/Users/jennygilbert/Documents/betaseries_bevel/4_combine_timeseries/sync_9_16/reward/'
filelist <- list.files(path = mypath, pattern = "*_reward.txt")
print(filelist)
corr_func <- function(name){
data <- read.delim(name, header = FALSE, sep = "\t")
names(data) <- c("Amygdala_L", "Amygdala_R", "Dorsal_striatum_L", "Dorsal_striatum_R", "Fusiform_gyrus_L", "Fusiform_gyrus_R", "Hippocampus_L", "Hippocampus_R", "Insula_L",
"Insula_R", "Intracalcarine_cortex_L", "Intracalcarine_cortex_R", "lOFC_R", "mOFC_L", "mOFC_R", "Oral_somatosensory_cortex_L", "Oral_somatosensory_cortex_R", "Precuneus_L",
"Precuneus_R", "Ventral_striatum_L", "Ventral_striatum_R", "vlPFC_L", "vlPFC_R", "vlThalamus_L" , "vlThalamus_R", "vmPFC_L", "vmPFC_R")
data.rcorr = rcorr(as.matrix(data))
data.coeff = data.rcorr$r
filename = paste(name, "_corr.csv")
write.table(data.coeff, file = filename, append = FALSE, sep = ",", dec = ".",
row.names = TRUE, col.names = TRUE)
data.p = data.rcorr$P
filenamep = paste(name, "_p.csv")
write.table(data.p, file = filenamep, append = FALSE, sep = ",", dec = ".",
row.names = TRUE, col.names = TRUE)
pdfname = paste(name, "_corrplot.pdf")
pdf(pdfname)
corrplot(data.rcorr$r, method = "color", p.mat = data.rcorr$P, sig.level = 0.001, insig = "label_sig")
dev.off()
}
#make a list of files
mypath <- '/Users/jennygilbert/Documents/betaseries_bevel/4_combine_timeseries/sync_9_16/reward/'
filelist <- list.files(path = mypath, pattern = "*_reward.txt")
print(filelist)
lapply(filelist, corr_func)
#make a list of files
mypath <- '/Users/jennygilbert/Documents/betaseries_bevel/4_combine_timeseries/sync_9_16/punish/'
filelist <- list.files(path = mypath, pattern = "*_punish.txt")
print(filelist)
lapply(filelist, corr_func)
setwd('/Users/jennygilbert/Documents/betaseries_bevel/4_combine_timeseries/sync_9_16/punish/')
lapply(filelist, corr_func)
